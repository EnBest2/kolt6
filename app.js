// app.js

// Kateg√≥ri√°k: alap√©rtelmezettk√©nt objektumok n√©v √©s ikon p√°rossal
let categories = JSON.parse(localStorage.getItem("categories")) || [
  { name: "√âtel", icon: "üçî" },
  { name: "Lakhat√°s", icon: "üè†" },
  { name: "Sz√≥rakoz√°s", icon: "üéâ" }
];

// Tranzakci√≥k t√°rol√°sa
let transactions = JSON.parse(localStorage.getItem("transactions")) || [];

// Friss√≠ti a kateg√≥ria leg√∂rd√ºl≈ë men√ºt
function updateCategoryList() {
  const categorySelect = document.getElementById("category");
  // Alap√©rtelmezett opci√≥k
  categorySelect.innerHTML = `
    <option value="bev√©tel">üí∞ Bev√©tel</option>
    <option value="kiad√°s">üõí Kiad√°s</option>
    <option value="megtakar√≠t√°s">üè¶ Megtakar√≠t√°s</option>
  `;
  // Egyedi kateg√≥ri√°k hozz√°ad√°sa
  categories.forEach(cat => {
    const option = document.createElement("option");
    option.value = cat.name;
    option.textContent = `${cat.icon} ${cat.name}`;
    categorySelect.appendChild(option);
  });
}

// √öj kateg√≥ria hozz√°ad√°sa, egyedi ikon opci√≥val
function addCategory() {
  const newCategoryName = document.getElementById("newCategory").value.trim();
  let newCategoryIcon = document.getElementById("categoryIcon").value.trim();
  
  if (!newCategoryName) {
    alert("K√©rlek add meg a kateg√≥ria nev√©t!");
    return;
  }
  if (!newCategoryIcon) {
    newCategoryIcon = "üìå"; // alap√©rtelmezett ikon, ha nincs megadva
  }
  // Ellen≈ërizz√ºk, hogy l√©tezik-e m√°r ugyanolyan kateg√≥ria (kis-nagybet≈±k figyelmen k√≠v√ºl hagy√°s√°val)
  if (categories.some(cat => cat.name.toLowerCase() === newCategoryName.toLowerCase())) {
    alert("Ez a kateg√≥ria m√°r l√©tezik!");
    return;
  }
  
  categories.push({ name: newCategoryName, icon: newCategoryIcon });
  localStorage.setItem("categories", JSON.stringify(categories));
  updateCategoryList();
  document.getElementById("newCategory").value = "";
  document.getElementById("categoryIcon").value = "";
}

// Tranzakci√≥ hozz√°ad√°sa hibaellen≈ërz√©ssel √©s d√°tum ment√©ssel
function addTransaction() {
  const categorySelect = document.getElementById("category");
  const transactionAmount = document.getElementById("transactionAmount").value;
  const transactionDescription = document.getElementById("transactionDescription").value.trim();
  const errorMessage = document.getElementById("errorMessage");
  errorMessage.textContent = "";
  
  if (!transactionAmount || !transactionDescription) {
    errorMessage.textContent = "Minden mez≈ët t√∂lts ki!";
    return;
  }
  
  const newTransaction = {
    id: Date.now(), // egyedi azonos√≠t√≥ az id≈ëb√©lyeg alapj√°n
    category: categorySelect.value,
    amount: parseFloat(transactionAmount),
    description: transactionDescription,
    date: new Date().toISOString() // ISO form√°tum√∫ d√°tum
  };
  
  transactions.push(newTransaction);
  localStorage.setItem("transactions", JSON.stringify(transactions));
  document.getElementById("transactionAmount").value = "";
  document.getElementById("transactionDescription").value = "";
  updateTransactions();
}

// Friss√≠ti a tranzakci√≥k list√°j√°t, minden t√©telhez t√∂rl√©s gombbal
function updateTransactions() {
  const transactionsList = document.getElementById("transactionsList");
  transactionsList.innerHTML = "";
  transactions.forEach(tx => {
    const div = document.createElement("div");
    div.innerHTML = `
      <span>${new Date(tx.date).toLocaleString()} - ${tx.category}: ${tx.description} - ${tx.amount} Ft</span>
      <button onclick="deleteTransaction(${tx.id})">T√∂rl√©s</button>
    `;
    transactionsList.appendChild(div);
  });
  updateBalances();
  updateChart();
}

// T√∂rli a megadott azonos√≠t√≥j√∫ tranzakci√≥t
function deleteTransaction(id) {
  transactions = transactions.filter(tx => tx.id !== id);
  localStorage.setItem("transactions", JSON.stringify(transactions));
  updateTransactions();
}

// Friss√≠ti az egyenleg √©s megtakar√≠t√°s √©rt√©keket
function updateBalances() {
  let totalIncome = 0, totalExpense = 0, totalSavings = 0;
  
  transactions.forEach(tx => {
    if (tx.category === "bev√©tel") {
      totalIncome += tx.amount;
    }
    if (tx.category === "kiad√°s") {
      totalExpense += tx.amount;
    }
    if (tx.category === "megtakar√≠t√°s") {
      totalSavings += tx.amount;
    }
  });
  
  document.getElementById("totalIncome").textContent = totalIncome;
  document.getElementById("totalExpense").textContent = totalExpense;
  document.getElementById("totalSavings").textContent = totalSavings;
}

// Grafikon friss√≠t√©se Chart.js-szel, sz√°zal√©kos √©rt√©kek megjelen√≠t√©s√©vel
let chart;
function updateChart() {
  let totalIncome = 0, totalExpense = 0, totalSavings = 0;
  
  transactions.forEach(tx => {
    if (tx.category === "bev√©tel") {
      totalIncome += tx.amount;
    }
    if (tx.category === "kiad√°s") {
      totalExpense += tx.amount;
    }
    if (tx.category === "megtakar√≠t√°s") {
      totalSavings += tx.amount;
    }
  });
  
  let sum = totalIncome + totalExpense + totalSavings;
  const percentages = sum ? [
    (totalIncome / sum * 100).toFixed(1),
    (totalExpense / sum * 100).toFixed(1),
    (totalSavings / sum * 100).toFixed(1)
  ] : [0, 0, 0];
  
  const ctx = document.getElementById('transactionChart').getContext('2d');
  if (chart) {
    chart.destroy();
  }
  
  chart = new Chart(ctx, {
    type: 'pie',
    data: {
      labels: [
        `Bev√©tel (${percentages[0]}%)`,
        `Kiad√°s (${percentages[1]}%)`,
        `Megtakar√≠t√°s (${percentages[2]}%)`
      ],
      datasets: [{
        data: [totalIncome, totalExpense, totalSavings],
        backgroundColor: ['green', 'red', 'blue']
      }]
    },
    options: {
      responsive: true,
      plugins: {
        tooltip: {
          callbacks: {
            label: function(context) {
              return context.label + ': ' + context.raw + ' Ft';
            }
          }
        }
      }
    }
  });
}

// Kezdeti friss√≠t√©sek bet√∂lt√©skor
updateCategoryList();
updateTransactions();
